#!/usr/bin/env python3
# Scroll 3 text allows setting the colour of each letter
# same as scroll2 but uses a diffrent font
# by Mike Cook August 2020

import board
import neopixel
import time

backCol = (32, 32, 0)  # colour for background
letterCol =  [ (128, 0, 0), (0, 128, 0), (128, 128, 0), (0, 64, 128),
               (0, 0, 128) ] # extend to as many colours as you want

def main():
    init()
    displayText("YOUR MESSAGE HERE ") # change to what you want to show, end with a space

def displayText(text):
    print("Displaying:-", text)
    dotBuffer = [(0, 0, 0)] * len(text) * 64
    lCol = -1
    for y in range(7): # do a row for each of the 7 rows of the font
        lCol = -1 # comment out and see what happens
        for i in range(0,len(text)): # step through each letter
            t = text[i: i+1:]
            fontPlace = ord(t) - 0x20
            fontEntry = fontPlace
            bitPattern = FONT7x5[fontEntry]
            bits = bitPattern[6-y]
            lCol += 1
            if lCol >= len(letterCol) : lCol = 0
            for x in range(1,7):
                mask = 1 << (6-x)
                if bits & mask !=0 :
                    dotBuffer[(x * 8) + (y) + (i * 48)] = letterCol[lCol]
                else :
                    dotBuffer[(x * 8) + (y) + (i * 48)] = backCol
    # now display the text
    xPoint = 0   
    xLimit = len(text) * 48      
    while 1 :  # do until ctrl C
        for y in range(0,7):
            for x in range(16):
                if xPoint + (x * 8) >= xLimit :
                    pixels[(x * 8) + y] = dotBuffer[xPoint - xLimit + (x * 8) + y]
                else :        
                    pixels[(x * 8) + y] = dotBuffer[xPoint + (x * 8) + y]
        pixels.show()
        time.sleep(0.1)
        pixels.fill(backCol)
        xPoint += 8
        if xPoint >= xLimit : xPoint = 0
    
def init():
    global pixels, FONT7x5
    size = 8, 16 # size of LED display
    pointer = 0
    pixel_pin = board.D18
    num_pixels = 128
    # RGB or GRB. Some NeoPixels have red and green reversed
    ORDER = neopixel.GRB
    BRIGHTNESS = 0.2 # 0.6 is maximum brightness for 3A external supply
    pixels = neopixel.NeoPixel(pixel_pin, num_pixels,
             brightness = BRIGHTNESS, auto_write = False,
             pixel_order = ORDER)
    pixels.fill(backCol)
    # defint an 7 by 5 font
    FONT7x5 = [
    #  columns, rows, num_bytes_per_char
    (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),   # 0x20, Space
    (0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04),   # 0x21, !
    (0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00),   # 0x22, "
    (0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a),   # 0x23, #
    (0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04),   # 0x24, $
    (0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13),   # 0x25, %
    (0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d),   # 0x26, &
    (0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00),   # 0x27, '
    (0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02),   # 0x28, (
    (0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08),   # 0x29, )
    (0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04),   # 0x2a, *
    (0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00),   # 0x2b, +
    (0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08),   # 0x2c, ,
    (0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00),   # 0x2d, -
    (0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c),   # 0x2e, .
    (0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10),   # 0x2f, /
    (0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e),   # 0x30, 0
    (0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e),   # 0x31, 1
    (0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f),   # 0x32, 2
    (0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e),   # 0x33, 3
    (0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02),   # 0x34, 4
    (0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e),   # 0x35, 5
    (0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e),   # 0x36, 6
    (0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08),   # 0x37, 7
    (0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e),   # 0x38, 8
    (0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c),   # 0x39, 9
    (0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00),   # 0x3a, :
    (0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08),   # 0x3b, ;
    (0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02),   # 0x3c, <
    (0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00),   # 0x3d, =
    (0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08),   # 0x3e, >
    (0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04),   # 0x3f, ?

    (0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f),   # 0x40, @
    (0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11),   # 0x41, A
    (0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e),   # 0x42, B
    (0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e),   # 0x43, C
    (0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e),   # 0x44, D
    (0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f),   # 0x45, E
    (0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10),   # 0x46, F
    (0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f),   # 0x37, G
    (0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11),   # 0x48, H
    (0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e),   # 0x49, I
    (0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c),   # 0x4a, J
    (0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11),   # 0x4b, K
    (0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f),   # 0x4c, L
    (0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11),   # 0x4d, M
    (0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11),   # 0x4e, N
    (0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e),   # 0x4f, O
    (0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10),   # 0x50, P
    (0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d),   # 0x51, Q
    (0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11),   # 0x52, R
    (0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e),   # 0x53, S
    (0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04),   # 0x54, T
    (0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e),   # 0x55, U
    (0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04),   # 0x56, V
    (0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11),   # 0x57, W
    (0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11),   # 0x58, X
    (0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04),   # 0x59, Y
    (0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f),   # 0x5a, Z
    (0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e),   # 0x5b, [
    (0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01),   # 0x5c, \
    (0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e),   # 0x5d, ]
    (0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00),   # 0x5e, ^
    (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f),   # 0x5f, _

    (0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00),   # 0x60, `
    (0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d),   # 0x61, a
    (0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c),   # 0x62, b
    (0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e),   # 0x63, c
    (0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07),   # 0x64, d
    (0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f),   # 0x65, e
    (0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08),   # 0x66, f
    (0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e),   # 0x67, g
    (0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11),   # 0x68, h
    (0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e),   # 0x69, i
    (0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c),   # 0x6a, j
    (0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12),   # 0x6b, k
    (0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04),   # 0x6c, l
    (0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11),   # 0x6d, m
    (0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11),   # 0x6e, n
    (0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e),   # 0x6f, o
    (0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10),   # 0x70, p
    (0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01),   # 0x71, q
    (0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10),   # 0x72, r
    (0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e),   # 0x73, s
    (0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06),   # 0x74, t
    (0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d),   # 0x75, u
    (0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04),   # 0x76, v
    (0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a),   # 0x77, w
    (0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11),   # 0x78, x
    (0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e),   # 0x79, y
    (0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f),   # 0x7a, z
    (0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06),   # 0x7b, (
    (0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04),   # 0x7c, |
    (0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c),   # 0x7d, }
    (0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00),   # 0x7e, ~
    (0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f)   # 0x7f, DEL
    ]
    
if __name__ == '__main__':
    main()
